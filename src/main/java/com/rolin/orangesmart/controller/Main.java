package com.rolin.orangesmart.controller;

/**
 * Author: Rolin
 * Date: 2025/5/16
 * Time: 22:23
 */
import java.util.Base64;

public class Main {
  public static void main(String[] args) {
    // Base64编码的字符串
    String encodedString = "5oGt5Zac5om+5Yiw56ys5LiA5q2l77yB6K+36K6h566X5Lul5LiL5L2N6L+Q566X6KGo6L6+5byP55qE57uT5p6c77yaCgooKCgoKCgoKCgoKDB4QTdCM0M5IDw8IDMpIHwgKDB4RDJFNUYxID4+IDIpKSAmIDB4RkZGRkZGKSBeIDB4NDI0MDMpICsgMHgxMzM3KSAmIDB4RkZGRkZGKSAqIDB4MTkpIF4gKCh+KCgweEJFRUYgPDwgNCkgJiAweEYwRjBGMCkpICYgMHhGRkZGRkYpKSA+PiAzKSAmIDB4N0ZGRkYpIF4gKCgoMHhDMEZGRUUgJiAweEYwMDAwRikgPDwgMikgfCAweEExRTAzKSkgJiAweEZGRkZGCgrkvYbmmK/ov5jmsqHnu5PmnZ/vvIzov5jor7fov5vkuIDmraXmjqLntKLpobXpnaI=";
//    String encodedString = "Y29kZT3kvaDlvpfliLDnmoRjb2RlKEhFWOWwj+WGme+8jOS4jeW4pjB45YmN57yAKQ==";

    // 使用Base64解码器进行解码
    byte[] decodedBytes = Base64.getDecoder().decode(encodedString);

    /**
     *
     * (((((((((((0xA7B3C9 << 3) | (0xD2E5F1 >> 2)) & 0xFFFFFF) ^ 0x42403) + 0x1337) & 0xFFFFFF) * 0x19) ^ ((~((0xBEEF << 4) & 0xF0F0F0)) & 0xFFFFFF)) >> 3) & 0x7FFFF) ^ (((0xC0FFEE & 0xF0000F) << 2) | 0xA1E03)) & 0xFFFFF
     * (((((((((((101001111011001111001001 << 3) | (110100101110010111110001 >> 2)) & 111111111111111111111111) ^ 1000010010000000011) + 1001100110111) & 111111111111111111111111) * 11001) ^ ((~((1011111011101111 << 4) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (((((((((((101001111011001111001001000) | (1101001011100101111100)) & 111111111111111111111111) ^ 1000010010000000011) + 1001100110111) & 111111111111111111111111) * 11001) ^ ((~((10111110111011110000) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (((((((((1010011111111011110111111100 & 111111111111111111111111) ^ 1000010010000000011) + 1001100110111) & 111111111111111111111111) * 11001) ^ ((~((10111110111011110000) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * ((((((((11111111011110111111100 ^ 1000010010000000011) + 1001100110111) & 111111111111111111111111) * 11001) ^ ((~((10111110111011110000) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (((((((011111011010111111111111 + 1001100110111) & 111111111111111111111111) * 11001) ^ ((~((10111110111011110000) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (((((11111011101001011101110 * 11001) ^ ((~((10111110111011110000) & 111100001111000011110000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * ((((11110100011110111111111110 ^ ((~(10110000111000000000)) & 111111111111111111111111)) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * ((((11110100011110111111111110 ^ 100111100011111111) >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (((11110010111100000000000001 >> 3) & 1111111111111111111) ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (1001011110000000000 ^ (((110000001111111111101110 & 111100000000000000001111) << 2) | 10100001111000000011)) & 11111111111111111111
     * (1001011110000000000 ^ ((110000000000000000001110 << 2) | 10100001111000000011)) & 11111111111111111111
     * (1001011110000000000 ^ (00000000000000000000111000 | 10100001111000000011)) & 11111111111111111111
     * (1001011110000000000 ^ 10100001111000011111) & 11111111111111111111
     * 100001000000000111111 & 11111111111111111111
     * 10000100000000011111
     * 8401f
     */

    // 将解码后的字节数组转换为字符串
    String decodedString = new String(decodedBytes);

    // 输出解码后的内容
    System.out.println(decodedString);
  }
}